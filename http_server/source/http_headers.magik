def_slotted_exemplar(
	:http_headers,
	{
		{:headers, _unset}
	})
$

http_headers.define_shared_constant(
	:crlf,
	character.from_value(13) + character.from_value(10),
	:private)
$

_method http_headers.new()
	_return _clone.init()
_endmethod
$

_private _method http_headers.init()
	.headers << equality_property_list.new()
	_return _self
_endmethod
$


_method http_headers.get_header(key)
	key << key.lowercase
	_for header_key, header_value _over .headers.fast_keys_and_elements()
	_loop
		_if header_key.lowercase = key
		_then
			_return header_value
		_endif
	_endloop
_endmethod
$

_method http_headers[key]
	_return _self.get_header(key)
_endmethod
$

_method http_headers.set_header(key, value)
	# clear old header, need to do this explicitly to ensure we
	# don't end up with two headers with the same key, but
	# different capitalization
	_for existing_key _over .headers.fast_keys()
	_loop
		_if existing_key.lowercase = key.lowercase
		_then
			.headers.remove_key(existing_key)
		_endif
	_endloop
	
	.headers[key] << value
_endmethod
$

_method http_headers[key] << value
	_return _self.set_header(key, value)
_endmethod
$


_iter _method http_headers.headers
	_for key, value _over .headers.fast_elements()
	_loop
		_loopbody(key, value)
	_endloop
_endmethod
$




_method http_headers.read_from_stream(stream)
	_loop
		line << stream.get_line()
		_if line = ""
		_then
			_leave
		_endif
		
		(key, value) << _self.parse_header(line)
		.headers[key] << value
	_endloop	 
_endmethod
$

_private _method http_headers.parse_header(line)
	index << line.index_of(%:)
	_if index _is _unset
	_then
		_return
	_endif
	
	key << line.subseq(1, index - 1)
	value << line.subseq(index + 1)
	_if value[1] _is %space
	_then
		value << value.subseq(2)
	_endif
	
	_return key, value
_endmethod
$


_method http_headers.write_to_stream(stream)
	_for key, value _over .headers.fast_keys_and_elements()
	_loop
		line << write_string(key, ": ", value, _self.crlf)
		stream.put_ascii_chars(line)
	_endloop
	
	line << write_string("", _self.crlf)
	stream.put_ascii_chars(line)
_endmethod
$
