def_slotted_exemplar(
	:http_get_root,
	{
		{:body, _unset, :writable, :public}
	},
	:http_route)
$

_method http_get_root.new(method, path, body)
	_return _clone.init(method, path, body)
_endmethod
$

_method http_get_root.init(method, path, body)
	_super.init(method, path)
	_self.body << body
	_return _self
_endmethod
$

_method http_get_root.handle(request, response)
	_return response.send(200, _self.body)
_endmethod
$


def_slotted_exemplar(
	:http_crash,
	{},
	:http_route)
$

_method http_crash.handle(request, response)
	object.crash
_endmethod
$



_block
	_protect
		http_app << http_application.new()
		http_app.add_middleware(http_params_parser.new())
		http_app.add_route(http_crash.new(:get, "/crash"))
		http_app.add_route(http_get_root.new(:get, "/aap/*", "root/aap/*"))
		http_app.add_route(http_get_root.new(:get, "/", "root"))
		server << http_app.listen(8081)
	_protection
		_if server _isnt _unset
		_then
			server.close()
		_endif
	_endprotect
_endblock
$
